// Generated by Fair on 2021-06-07 15:48:58.911522.
import 'package:flutter_component/slidable_widget.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:animated_text_kit/src/rotate.dart';
import 'package:bottom_navy_bar/bottom_navy_bar.dart';
import 'package:flutter_slidable/src/widgets/slidable.dart';
import 'package:flutter_slidable/src/widgets/slide_action.dart';
import 'package:flutter_slidable/src/widgets/slidable_action_pane.dart';
import 'package:flutter_slidable/src/widgets/slidable_dismissal.dart';
import 'package:flutter_slidable/src/widgets/fractionnally_aligned_sized_box.dart';

import 'package:flutter/material.dart';
import 'package:fair/fair.dart';
import 'package:fair_version/fair_version.dart';

class AppGeneratedModule extends GeneratedModule {
  @override
  Map<String, dynamic> components() {
    return {
      'RotateAnimatedTextKit': (props) => RotateAnimatedTextKit(
            key: props['key'],
            text: as<String>(props['text']),
            textStyle: props['textStyle'],
            transitionHeight: props['transitionHeight']?.toDouble(),
            pause: props['pause'],
            onNext: props['onNext'],
            onNextBeforePause: props['onNextBeforePause'],
            onFinished: props['onFinished'],
            totalRepeatCount: props['totalRepeatCount'] ?? 3,
            duration: props['duration'],
            onTap: props['onTap'],
            alignment: props['alignment'] ?? const Alignment(0.0, 0.0),
            textAlign: props['textAlign'] ?? TextAlign.start,
            displayFullTextOnTap: props['displayFullTextOnTap'] ?? false,
            repeatForever: props['repeatForever'] ?? false,
            isRepeatingAnimation: props['isRepeatingAnimation'] ?? true,
          ),
      'BottomNavyBar': (props) => BottomNavyBar(
            key: props['key'],
            selectedIndex: props['selectedIndex'] ?? 0,
            showElevation: props['showElevation'] ?? true,
            iconSize: props['iconSize']?.toDouble() ?? 24,
            backgroundColor: props['backgroundColor'],
            itemCornerRadius: props['itemCornerRadius']?.toDouble() ?? 50,
            containerHeight: props['containerHeight']?.toDouble() ?? 56,
            animationDuration:
                props['animationDuration'] ?? const Duration(milliseconds: 270),
            mainAxisAlignment:
                props['mainAxisAlignment'] ?? MainAxisAlignment.spaceBetween,
            items: as<BottomNavyBarItem>(props['items']),
            onItemSelected: props['onItemSelected'],
            curve: props['curve'] ?? Curves.linear,
          ),
      'BottomNavyBarItem': (props) => BottomNavyBarItem(
        icon: props['icon'],
        title: props['title'] ?? 'Test',
      ),
      'CustomWidget': (props) => CustomWidget(
            key: props['key'],
            title: props['title'] ?? 'Test',
          ),
      'IconSlideAction': (props) => IconSlideAction(
            key: props['key'],
            icon: props['icon'],
            iconWidget: props['iconWidget'],
            caption: props['caption'],
            color: props['color'],
            foregroundColor: props['foregroundColor'],
            onTap: props['onTap'],
            closeOnTap: props['closeOnTap'] ?? true,
          ),
      'SlideAction': (props) => SlideAction(
            key: props['key'],
            child: props['child'],
            onTap: props['onTap'],
            color: props['color'],
            decoration: props['decoration'],
            closeOnTap: props['closeOnTap'] ?? true,
          ),
      'SlidableDismissal': (props) => SlidableDismissal(
            child: props['child'],
            dismissThresholds:
                props['dismissThresholds'] ?? const <SlideActionType, double>{},
            onResize: props['onResize'],
            onDismissed: props['onDismissed'],
            resizeDuration: props['resizeDuration'] ??  const Duration(milliseconds: 200),
            crossAxisEndOffset: props['crossAxisEndOffset']?.toDouble() ?? 0.0,
            onWillDismiss: props['onWillDismiss'],
            closeOnCanceled: props['closeOnCanceled'] ?? false,
            dragDismissible: props['dragDismissible'] ?? true,
          ),
      'SlidableDrawerDismissal': (props) => SlidableDrawerDismissal(
            key: props['key'],
          ),
      'FractionallyAlignedSizedBox': (props) => FractionallyAlignedSizedBox(
            key: props['key'],
            child: props['child'],
            leftFactor: props['leftFactor']?.toDouble(),
            topFactor: props['topFactor']?.toDouble(),
            rightFactor: props['rightFactor']?.toDouble(),
            bottomFactor: props['bottomFactor']?.toDouble(),
            widthFactor: props['widthFactor']?.toDouble(),
            heightFactor: props['heightFactor']?.toDouble(),
          ),
      'Slidable': (props) => Slidable(
            key: props['key'],
            child: props['child'],
            actionPane: props['actionPane'],
            actions: as<Widget>(props['actions']),
            secondaryActions: as<Widget>(props['secondaryActions']),
            showAllActionsThreshold:
                props['showAllActionsThreshold']?.toDouble() ?? 0.5,
            actionExtentRatio:
                props['actionExtentRatio']?.toDouble() ?? 0.25,
            movementDuration: props['movementDuration'] ??  const Duration(milliseconds: 200),
            direction: props['direction'] ?? Axis.horizontal,
            closeOnScroll: props['closeOnScroll'] ?? true,
            enabled: props['enabled'] ?? true,
            dismissal: props['dismissal'],
            controller: props['controller'],
            fastThreshold: props['fastThreshold']?.toDouble(),
          ),
      'Slidable.builder': (props) => Slidable.builder(
            key: props['key'],
            child: props['child'],
            actionPane: props['actionPane'],
            actionDelegate: props['actionDelegate'],
            secondaryActionDelegate: props['secondaryActionDelegate'],
            showAllActionsThreshold:
                props['showAllActionsThreshold']?.toDouble() ?? 0.5,
            actionExtentRatio:
                props['actionExtentRatio']?.toDouble() ?? 0.25,
            movementDuration: props['movementDuration'] ??  const Duration(milliseconds: 200),
            direction: props['direction'] ?? Axis.horizontal,
            closeOnScroll: props['closeOnScroll'] ?? true,
            enabled: props['enabled'] ?? true,
            dismissal: props['dismissal'],
            controller: props['controller'],
            fastThreshold: props['fastThreshold']?.toDouble(),
          ),
      'SlidableData': (props) => SlidableData(
            key: props['key'],
            actionType: props['actionType'],
            renderingMode: props['renderingMode'],
            totalActionsExtent: props['totalActionsExtent']?.toDouble(),
            dismissThreshold: props['dismissThreshold']?.toDouble(),
            dismissible: props['dismissible'],
            actionDelegate: props['actionDelegate'],
            overallMoveAnimation: props['overallMoveAnimation'],
            actionsMoveAnimation: props['actionsMoveAnimation'],
            dismissAnimation: props['dismissAnimation'],
            slidable: props['slidable'],
            actionExtentRatio: props['actionExtentRatio']?.toDouble(),
            direction: props['direction'],
            child: props['child'],
          ),
      'SlidableRenderingMode': {
        'values': SlidableRenderingMode.values,
        'none': SlidableRenderingMode.none,
        'slide': SlidableRenderingMode.slide,
        'dismiss': SlidableRenderingMode.dismiss,
        'resize': SlidableRenderingMode.resize,
      },
      'SlideActionType': {
        'values': SlideActionType.values,
        'primary': SlideActionType.primary,
        'secondary': SlideActionType.secondary,
      },
      'SlidableBehindActionPane': (props) => SlidableBehindActionPane(
            key: props['key'],
          ),
      'SlidableDrawerActionPane': (props) => SlidableDrawerActionPane(
            key: props['key'],
          ),
      'SlidableScrollActionPane': (props) => SlidableScrollActionPane(
            key: props['key'],
          ),
      'SlidableStrechActionPane': (props) => SlidableStrechActionPane(
            key: props['key'],
          ),
    };
  }

  @override
  Map<String, bool> mapping() {
    return const {
      'BottomNavyBar': true,
      'CustomWidget': true,
      'FractionallyAlignedSizedBox': true,
      'IconSlideAction': true,
      'RotateAnimatedTextKit': true,
      'Slidable': true,
      'SlidableBehindActionPane': true,
      'SlidableData': true,
      'SlidableDismissal': true,
      'SlidableDrawerActionPane': true,
      'SlidableDrawerDismissal': true,
      'SlidableRenderingMode': false,
      'SlidableScrollActionPane': true,
      'SlidableStrechActionPane': true,
      'SlideAction': true,
      'SlideActionType': false,
    };
  }
}
